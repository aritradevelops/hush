/**
 * ⚠️ This file is auto-generated with `npm run cli g:query`
 * Do NOT edit this file manually. Changes will be overwritten.
 */
export class GroupQuery {
  /**
   * details of a group by id
   * @param {uuid} $1 - The group's id
   * @param {uuid} $2 - The user's id
   */
  detailsById() {
    return `SELECT g.*, row_to_json(me) as me, ( SELECT array_agg( row_to_json( (SELECT r FROM ( SELECT u.id, u.email, u.name, u.avatar, ( SELECT CASE WHEN c.id IS NULL THEN NULL ELSE row_to_json(c) END FROM ( SELECT c.* FROM contacts c WHERE c.user_id = u.id AND c.created_by = $2::uuid LIMIT 1 ) c ) AS contact ) r) ) ) FROM users u WHERE u.id = ANY (g.member_ids) ) AS members FROM groups g LEFT JOIN LATERAL (SELECT u.id, u.email, u.name, u.avatar FROM users u WHERE u.id = $2::uuid) AS me ON TRUE WHERE g.id = $1::uuid AND g.member_ids @> ARRAY[$2]::uuid[] LIMIT 1;`;
  }

  /**
   * List groups with the last chat for a user
   * @param {uuid} $1 - The user's id
   */
  listWithLastChat() {
    return `SELECT g.*, CASE WHEN last_chat.id IS NOT NULL THEN row_to_json(last_chat) ELSE NULL END AS last_chat FROM groups g LEFT JOIN LATERAL ( SELECT chat.* FROM chats chat WHERE chat.channel_id = g.id ORDER BY chat.created_at DESC LIMIT 1 ) AS last_chat ON TRUE WHERE g.member_ids @> ARRAY[$1]::uuid[] ORDER BY last_chat.created_at DESC;`;
  }
}
export default new GroupQuery();